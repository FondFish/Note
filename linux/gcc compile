-L指定程序编译时的库搜索路径，而-rpath指定程序执行时的库搜索路径。
指定单个程序执行时的库搜索路径，利用-rpath即可，比如：
-Wl,-rpath,/path/to/foo -L/path/to/foo -lbaz
注意其中的-Wl，这表示它后面的参数是要传递给linker程序ld的。通过这几个参数会让ld会在连接程序时，在程序里写上对应的elf动态段属性RPATH：
lenky@Ubuntu:~/test$ gcc -o t -Wl,-rpath,/usr/lib,-rpath,/home/lenky/lib,-rpath,/opt t.c 
lenky@Ubuntu:~/test$ readelf -a t | grep RPATH
 0x0000000f (RPATH)                      Library rpath: [/usr/lib:/home/lenky/lib:/opt]

make V=1，这个选项能显示出编译过程中的详细信息，即是verbose编译模式

-fomit-frame-pointer：编译时会优化去掉SFP堆栈信息，目前X86-64 -O1选项会自动对此优化；
                                   与其相反的是 -fomit-omit-frame-pointer

-rdynamic :动态编译时将符号表添加进来（堆栈回溯时有用）

使用POSIX消息队列API的程序必须带选项编译cc -lrt以链接到实时库librt。

GCC4.1中有三个与堆栈保护有关的编译选项:
-fstack-protector:启用堆栈保护,不过只为局部变量中含有char数组的函数插入保护代码;
-fstack-protector-all:启用堆栈保护,为所有函数插入保护代码;
-fno-stack-protector:禁用堆栈保护;


_MAKE_DEPEND_FILE=DISABLE

m-g选项使目标文件func_call包含程序的调试信息
ake -qp ：如果只是想输出信息而不想执行makefile
make –p –f /dev/null ：如果想查看执行makefile前的预设变量和规则，这个参数输出的信息会包含着你的makefile文件的文件名和行号

在make中显示变量内容
$(info **********_MAK_TORNADO_INCLUDE_PATH:${_MAK_TORNADO_INCLUDE_PATH} **************)

$(subst <from>,<to>,<text>) 
    名称：字符串替换函数——subst。
    功能：把字串<text>中的<from>字符串替换成<to>。
    返回：函数返回被替换过后的字符串。
 $(subst ee,EE,feet on the street)，
        把“feet on the street”中的“ee”替换成“EE”，返回结果是“fEEt on the strEEt”。

$(patsubst <pattern>,<replacement>,<text>) 
    名称：模式字符串替换函数——patsubst。
    功能：查找<text>中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式<pattern>，如果匹配的话，则以<replacement>替换。
 $(patsubst %.c,%.o,x.c.c bar.c)
        把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.o bar.o”


“$<”和“$@”是自动化变量，“$<”表示所有的依赖目标集，“$@”表示目标集

Makefile 惯例
下面是Makefile中一些约定俗成的目标名称及其含义：
all编译整个软件包，但不重建任何文档。一般此目标作为默认的终极目标。此目标一般对所有源程序的编译和连接使用"-g"选项，以使最终的可执行程序中包含调试信息。可使用 strip 程序去掉这些调试符号。clean清除当前目录下在 make 过程中产生的文件。它不能删除软件包的配置文件，也不能删除 build 时创建的那些文件。distclean类似于"clean"，但增加删除当前目录下的的配置文件、build 过程产生的文件。info产生必要的 Info 文档。check 或 test完成所有的自检功能。在执行检查之前，应确保所有程序已经被创建(但可以尚未安装)。为了进行测试，需要实现在程序没有安装的情况下被执行的测试命令。install完成程序的编译并将最终的可执行程序、库文件等拷贝到指定的目录。此种安装一般不对可执行程序进行 strip 操作。install-strip和"install"类似，但是会对复制到安装目录下的可执行文件进行 strip 操作。uninstall删除所有由"install"安装的文件。installcheck执行安装检查。在执行安装检查之前，需要确保所有程序已经被创建并且被安装。installdirs创建安装目录及其子目录。它不能更改软件的编译目录，而仅仅是创建程序的安装目录。
下面是 Makefile 中一些约定俗成的变量名称及其含义：
这些约定俗成的变量分为三类。第一类代表可执行程序的名字，例如 CC 代表编译器这个可执行程序；第二类代表程序使用的参数(多个参数使用空格分开)，例如 CFLAGS 代表编译器执行时使用的参数(一种怪异的做法是直接在 CC 中包含参数)；第三类代表安装目录，例如 prefix 等等，含义简单，下面只列出它们的默认值。
AR   函数库打包程序，可创建静态库.a文档。默认是"ar"。
A
AS   汇编程序。默认是"as"。

CC   C编译程序。默认是"cc"。
C
CXX  C++编译程序。默认是"g++"。
C
CPP  C/C++预处理器。默认是"$(CC) -E"。
F
FC   Fortran编译器。默认是"f77"。
P
PC   Pascal语言编译器。默认是"pc"。
Y
YACC Yacc文法分析器。默认是"yacc"。



A
ARFLAGS     函数库打包程序的命令行参数。默认值是"rv"。
A
ASFLAGS     汇编程序的命令行参数。

CFLAGS      C编译程序的命令行参数。
C
CXXFLAGS    C++编译程序的命令行参数。

CPPFLAGS    C/C++预处理器的命令行参数。
F
FFLAGS      Fortran编译器的命令行参数。
P
PFLAGS      Pascal编译器的命令行参数。
Y
YFLAGS      Yacc文法分析器的命令行参数。
L
LDFLAGS     链接器的命令行参数。



p
prefix      /usr/local
e
exec_prefix $(prefix)
b
bindir      $(exec_prefix)/bin
s
sbindir     $(exec_prefix)/sbin
l
libexecdir  $(exec_prefix)/libexec
d
datadir     $(prefix)/share
s
sysconfdir  $(prefix)/etc
s
sharedstatedir $(prefix)/com
l
localstatedir  $(prefix)/var
l
libdir      $(exec_prefix)/lib
i
infodir     $(prefix)/info
i
includedir  $(prefix)/include
o
oldincludedir  $(prefix)/include
m
mandir      $(prefix)/man
s
srcdir      需要编译的源文件所在的目录，无默认值


make 选项
最后说说 make 的命令行选项(以Make-3.81版本为准)：
-B, --always-make无条件的重建所有规则的目标，而不是根据规则的依赖关系决定是否重建某些目标文件。
-C DIR, --directory=DIR在做任何动作之前先切换工作目录到 DIR ，然后再执行 make 程序。
-d在 make 执行过程中打印出所有的调试信息。包括：make 认为那些文件需要重建；那些文件需要比较它们的最后修改时间、比较的结果；重建目标所要执行的命令；使用的隐含规则等。使用该选项我们可以看到 make 构造依赖关系链、重建目标过程的所有信息，它等效于"-debug=a"。
--debug=FLAGS在 make 执行过程中打印出调试信息。
FLAGS 用于控制调试信息级别：
a输出所有类型的调试信息b输出基本调试信息。包括：那些目标过期、是否重建成功过期目标文件。
v除 b 级别以外还包括：解析的 makefile 文件名，不需要重建文件等。
i除 b 级别以外还包括：所有使用到的隐含规则描述。
j输出所有执行命令的子进程，包括命令执行的 PID 等。
m输出 make 读取、更新、执行 makefile 的信息。
-e, --environment-overrides使用系统环境变量的定义覆盖 Makefile 中的同名变量定义。
-f FILE, --file=FILE, --makefile=FILE将 FILE 指定为 Makefile 文件。
-h, --help打印帮助信息。-i, --ignore-errors忽略规则命令执行过程中的错误。
-I DIR, --include-dir=DIR指定包含 Makefile 文件的搜索目录。使用多个"-I"指定目录时，搜索目录按照指定顺序进行。
-j [N], --jobs[=N]指定并行执行的命令数目。在没有指定"-j"参数的情况下，执行的命令数目将是系统允许的最大可能数目。
-k, --keep-going遇见命令执行错误时不终止 make 的执行，也就是尽可能执行所有的命令，直到出现致命错误才终止。
-l [N], --load-average[=N], --max-load[=N]如果系统负荷超过 LOAD(浮点数)，不再启动新任务。
-L, --check-symlink-times同时考察符号连接的时间戳和它所指向的目标文件的时间戳，以两者中较晚的时间戳为准。
-n, --just-print, --dry-run, --recon只打印出所要执行的命令，但并不实际执行命令。
-o FILE, --old-file=FILE, --assume-old=FILE即使相对于它的依赖已经过期也不重建 FILE 文件；同时也不重建依赖于此文件任何文件。
-p, --print-data-base命令执行之前，打印出 make 读取的 Makefile 的所有数据（包括规则和变量的值），同时打印出 make 的版本信息。如果只需要打印这些数据信息，可以使用 make -qp 命令。
查看 make 执行前的预设规则和变量，可使用命令 make -p -f /dev/null 。
-q, --question"询问模式"。不运行任何命令，并且无输出，只是返回一个查询状态。返回状态为 0 表示没有目标需要重建，1 表示存在需要重建的目标，2 表示有错误发生。
-r, --no-builtin-rules取消所有内嵌的隐含规则，不过你可以在 Makefile 中使用模式规则来定义规则。同时还会取消所有支持后追规则的隐含后缀列表，同样我们也可以在 Makefile 中使用".SUFFIXES"定义我们自己的后缀规则。此选项不会取消 make 内嵌的隐含变量。
-R, --no-builtin-variables取消 make 内嵌的隐含变量，不过我们可以在 Makefile 中明确定义某些变量。注意，此选项同时打开了"-r"选项。因为隐含规则是以内嵌的隐含变量为基础的。
-s, --silent, --quiet不显示所执行的命令。-S, --no-keep-going, --stop取消"-k"选项。
在递归的 make 过程中子 make 通过 MAKEFLAGS 变量继承了上层的命令行选项。我们可以在子 make 中使用"-S"选项取消上层传递的"-k"选项，或者取消系统环境变量 MAKEFLAGS 中的"-k"选项。
-t, --touch更新所有目标文件的时间戳到当前系统时间。防止 make 对所有过时目标文件的重建。
-v, --version打印版本信息。-w, --print-directory在 make 进入一个目录之前打印工作目录。使用"-C"选项时默认打开这个选项。
--no-print-directory取消"-w"选项。可以是用在递归的 make 调用过程中，取消"-C"参数将默认打开"-w"。
-W FILE, --what-if=FILE, --new-file=FILE, --assume-new=FILE设定 FILE 文件的时间戳为当前时间，但不改变文件实际的最后修改时间。此选项主要是为实现了对所有依赖于 FILE 文件的目标的强制重建。
--warn-undefined-variables在发现 Makefile 中存在对未定义的变量进行引用时给出告警信息。此功能可以帮助我们调试一个存在多级套嵌变量引用的复杂 Makefile 。但是：我们建议在书写 Makefile 时尽量避免超过三级以上的变量套嵌引用。
