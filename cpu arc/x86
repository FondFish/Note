      X86-64中，所有寄存器都是64位，相对32位的x86来说，标识符发生了变化，比如：从原来的%ebp变成了%rbp。为了向后兼容性，%ebp依然可以使用，
不过指向了%rbp的低32位。
      X86-64寄存器的变化，不仅体现在位数上，更加体现在寄存器数量上。新增加寄存器%r8到%r15。加上x86的原有8个，一共16个寄存器。
      刚刚说到，寄存器集成在CPU上，存取速度比存储器快好几个数量级，寄存器多了，GCC就可以更多的使用寄存器，替换之前的存储器堆栈使用，
从而大大提升性能。
让寄存器为己所用，就得了解它们的用途，这些用途都涉及函数调用，X86-64有16个64位寄存器，分别是：%rax，%rbx，%rcx，%rdx，%esi，%edi，%rbp，%rsp，
%r8，%r9，%r10，%r11，%r12，%r13，%r14，%r15。其中：
%rax 作为函数返回值使用。
%rsp 栈指针寄存器，指向栈顶
%rdi，%rsi，%rdx，%rcx，%r8，%r9 用作函数参数，依次对应第1参数，第2参数。。。
%rbx，%rbp，%r12，%r13，%14，%15 用作数据存储，遵循被调用者使用规则，简单说就是随便用，调用子函数之前要备份它，以防他被修改
%r10，%r11 用作数据存储，遵循调用者使用规则，简单说就是使用之前要先保存原值
每个栈帧对应一个过程。X86-32典型栈帧结构中，由%ebp指向栈帧开始，%esp指向栈顶。
ESP==>|           :             |
            |           .             |
            +-------------------------+
            | 被调用者保存的寄存器现场   |
            | EBX，ESI和EDI（根据需要） |
            +-------------------------+
            |  临时空间                |
            +-------------------------+
            |  局部变量#2              | [EBP - 8]
            +-------------------------+
            |  局部变量#1              | [EBP - 4]
            +-------------------------+
      EBP==>|  调用者的EBP             |
            +-------------------------+
            |  返回地址                |
            +-------------------------+
            |  实际参数#1              | [EBP + 8]
            +-------------------------+
            |  实际参数#2              | [EBP + 12]
            +-------------------------+
            |  实际参数#3              | [EBP + 16]
            +-------------------------+
            |  调用者保存的寄存器现场    |
            |  EAX，ECX和EDX（根据需要）|
            +-------------------------+
            |            :            |
            |            .            |



开栈：
  40110a:       55                      push   %rbp
  40110b:       48 89 e5                mov    %rsp,%rbp
  40110e:       48 81 ec a0 00 00 00    sub    $0xa0,%rsp
栈保护：
  401115:       64 48 8b 04 25 28 00    mov    %fs:0x28,%rax
  40111c:       00 00 
  40111e:       48 89 45 f8             mov    %rax,-0x8(%rbp)
栈保护校验：
  40117c:       48 8b 45 f8             mov    -0x8(%rbp),%rax
  401180:       64 48 33 04 25 28 00    xor    %fs:0x28,%rax
  401187:       00 00 
  401189:       74 05                   je     401190 <LoadSignal+0x86>
  40118b:       e8 a0 f8 ff ff          callq  400a30 <__stack_chk_fail@plt>
